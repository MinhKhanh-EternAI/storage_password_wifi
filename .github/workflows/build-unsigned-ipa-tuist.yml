name: 'CI: Xcode/Tuist unsigned IPA pipeline'

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      scheme:
        description: 'Xcode scheme to build'
        required: false
        default: 'WiFiOffline'
        type: string
      configuration:
        description: 'Build configuration'
        required: false
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug

permissions:
  contents: read

env:
  SCHEME: ${{ inputs.scheme || 'WiFiOffline' }}
  CONFIGURATION: ${{ inputs.configuration || 'Release' }}
  WORKSPACE: 'WiFiOffline.xcworkspace'

jobs:
  build-unsigned-ipa-tuist:
    runs-on: macos-14
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show environment info
        run: |
          echo "=== Build Environment ==="
          xcodebuild -version
          sw_vers
          echo "Available simulators:"
          xcrun simctl list devices available | head -20
          echo "=== Build Configuration ==="
          echo "SCHEME: ${{ env.SCHEME }}"
          echo "CONFIGURATION: ${{ env.CONFIGURATION }}"
          echo "WORKSPACE: ${{ env.WORKSPACE }}"

      - name: Cache Tuist
        id: cache-tuist
        uses: actions/cache@v3
        with:
          path: |
            ~/.tuist
            /usr/local/bin/tuist
          key: tuist-${{ runner.os }}-${{ hashFiles('**/Tuist/**') }}
          restore-keys: |
            tuist-${{ runner.os }}-

      - name: Install Tuist
        if: steps.cache-tuist.outputs.cache-hit != 'true'
        shell: bash
        run: |
          set -euo pipefail
          
          # Try homebrew first
          if brew tap tuist/tuist && brew install tuist; then
            echo "Tuist installed via Homebrew"
          else
            echo "Homebrew failed, using official installer"
            curl -Ls https://install.tuist.io | bash
            echo "$HOME/.tuist/bin" >> "$GITHUB_PATH"
          fi
          
          # Verify installation
          if command -v tuist >/dev/null 2>&1; then
            tuist version
          else
            echo "‚ùå Tuist installation failed"
            exit 1
          fi

      - name: Cache derived data
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            build/
          key: xcode-deriveddata-${{ runner.os }}-${{ env.SCHEME }}-${{ env.CONFIGURATION }}-${{ hashFiles('**/*.swift', '**/*.h', '**/*.m', '**/project.pbxproj') }}
          restore-keys: |
            xcode-deriveddata-${{ runner.os }}-${{ env.SCHEME }}-${{ env.CONFIGURATION }}-
            xcode-deriveddata-${{ runner.os }}-${{ env.SCHEME }}-
            xcode-deriveddata-${{ runner.os }}-

      - name: Validate and normalize Info.plist
        shell: bash
        run: |
          set -euo pipefail
          
          PLIST_FILE="Info.plist"
          
          if [[ ! -f "$PLIST_FILE" ]]; then
            echo "‚ùå Missing $PLIST_FILE"
            exit 1
          fi
          
          echo "üìù Processing $PLIST_FILE"
          
          # Remove BOM and normalize line endings
          python3 - <<'EOF'
          from pathlib import Path
          import sys

          plist_file = Path('Info.plist')
          try:
              content = plist_file.read_bytes()
              
              # Remove UTF-8 BOM if present
              if content.startswith(b'\xef\xbb\xbf'):
                  content = content[3:]
                  print("‚úÖ Removed UTF-8 BOM")
              
              # Normalize line endings to Unix format
              content = content.replace(b'\r\n', b'\n').replace(b'\r', b'\n')
              
              plist_file.write_bytes(content)
              print("‚úÖ Normalized line endings")
              
          except Exception as e:
              print(f"‚ùå Error processing plist: {e}")
              sys.exit(1)
          EOF
          
          # Convert to XML format and validate
          plutil -convert xml1 "$PLIST_FILE" || {
            echo "‚ùå Failed to convert plist to XML"
            exit 1
          }
          
          plutil -lint "$PLIST_FILE" || {
            echo "‚ùå Plist validation failed"
            exit 1
          }
          
          echo "‚úÖ Info.plist validated successfully"

      - name: Clean Tuist cache
        run: |
          tuist clean
          tuist cache warm || true

      - name: Generate Xcode project
        run: |
          echo "üîß Generating Xcode project with Tuist"
          tuist generate --no-open

      - name: Verify workspace exists
        run: |
          if [[ ! -f "${{ env.WORKSPACE }}" ]]; then
            echo "‚ùå Workspace not found: ${{ env.WORKSPACE }}"
            echo "Available files:"
            ls -la *.xc* || true
            exit 1
          fi
          echo "‚úÖ Workspace found: ${{ env.WORKSPACE }}"

      - name: Build unsigned .app
        shell: bash
        run: |
          set -euo pipefail
          
          echo "üî® Building unsigned app"
          echo "Scheme: ${{ env.SCHEME }}"
          echo "Configuration: ${{ env.CONFIGURATION }}"
          
          xcodebuild \
            -workspace "${{ env.WORKSPACE }}" \
            -scheme "${{ env.SCHEME }}" \
            -configuration "${{ env.CONFIGURATION }}" \
            -sdk iphoneos \
            -destination "generic/platform=iOS" \
            -derivedDataPath build \
            -quiet \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_IDENTITY="" \
            PROVISIONING_PROFILE="" \
            clean build
          
          echo "‚úÖ Build completed successfully"

      - name: Package unsigned IPA
        shell: bash
        run: |
          set -euo pipefail
          
          echo "üì¶ Packaging unsigned IPA"
          
          # Find the built app
          APP_PATH=$(find build/Build/Products/${{ env.CONFIGURATION }}-iphoneos -maxdepth 1 -type d -name "*.app" -print -quit)
          
          if [[ -z "$APP_PATH" || ! -d "$APP_PATH" ]]; then
            echo "‚ùå Built .app not found"
            echo "Contents of build directory:"
            find build -name "*.app" -type d || true
            exit 1
          fi
          
          echo "‚úÖ Found app: $APP_PATH"
          
          # Get app info
          PLIST="$APP_PATH/Info.plist"
          
          if [[ ! -f "$PLIST" ]]; then
            echo "‚ùå Info.plist not found in app bundle"
            exit 1
          fi
          
          # Extract bundle info
          BUNDLE_ID=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$PLIST" 2>/dev/null || echo "unknown")
          APP_VERSION=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' "$PLIST" 2>/dev/null || echo "1.0")
          BUILD_NUMBER=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' "$PLIST" 2>/dev/null || echo "1")
          
          echo "üì± App Info:"
          echo "  Bundle ID: $BUNDLE_ID"
          echo "  Version: $APP_VERSION"
          echo "  Build: $BUILD_NUMBER"
          
          # Ensure required plist entries exist
          APP_NAME=$(basename "$APP_PATH" .app)
          
          if ! /usr/libexec/PlistBuddy -c 'Print :CFBundleExecutable' "$PLIST" >/dev/null 2>&1; then
            /usr/libexec/PlistBuddy -c "Add :CFBundleExecutable string $APP_NAME" "$PLIST"
            echo "‚úÖ Added CFBundleExecutable: $APP_NAME"
          fi
          
          # Clean up previous builds
          rm -rf Payload *.ipa
          
          # Create IPA
          mkdir -p Payload
          cp -R "$APP_PATH" Payload/
          
          IPA_NAME="${{ env.SCHEME }}-unsigned-v${APP_VERSION}-b${BUILD_NUMBER}.ipa"
          
          echo "üì¶ Creating IPA: $IPA_NAME"
          ditto -ck --sequesterRsrc --keepParent Payload "$IPA_NAME"
          
          # Validate IPA
          echo "üîç IPA Validation:"
          if [[ -f "$IPA_NAME" ]]; then
            SIZE=$(stat -f%z "$IPA_NAME" 2>/dev/null || stat -c%s "$IPA_NAME")
            echo "  Size: $(numfmt --to=iec $SIZE) ($SIZE bytes)"
            
            if (( SIZE < 500000 )); then
              echo "‚ùå IPA too small (< 500KB) - likely invalid"
              exit 1
            fi
            
            echo "üìã IPA Contents (first 50 files):"
            unzip -l "$IPA_NAME" | head -n 50
            
            # Set output for artifact
            echo "ipa-name=$IPA_NAME" >> $GITHUB_OUTPUT
            echo "app-version=$APP_VERSION" >> $GITHUB_OUTPUT
            echo "build-number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
            echo "bundle-id=$BUNDLE_ID" >> $GITHUB_OUTPUT
            
            echo "‚úÖ IPA created successfully"
          else
            echo "‚ùå IPA creation failed"
            exit 1
          fi

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SCHEME }}-unsigned-ipa
          path: "*.ipa"
          if-no-files-found: error
          retention-days: 30

      - name: Build summary
        run: |
          echo "## üéâ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Scheme**: ${{ env.SCHEME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Configuration**: ${{ env.CONFIGURATION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle ID**: ${{ steps.package-ipa.outputs.bundle-id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.package-ipa.outputs.app-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ steps.package-ipa.outputs.build-number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **IPA**: ${{ steps.package-ipa.outputs.ipa-name }}" >> $GITHUB_STEP_SUMMARY