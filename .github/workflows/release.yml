name: Build Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  release:
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          brew install xcodegen
          gem install xcpretty

      - name: Generate Xcode project
        run: xcodegen

      - name: Detect scheme
        id: scheme
        run: |
          SCHEME=$(xcodebuild -list -json | /usr/bin/python3 -c "import sys, json; d=json.load(sys.stdin); print((d.get('project') or {}).get('schemes',[None])[0])")
          if [ -z "$SCHEME" ] || [ "$SCHEME" = "None" ]; then
            echo "Không tìm thấy scheme. Hãy khai báo SCHEME thủ công."
            exit 1
          fi
          echo "scheme=$SCHEME" >> $GITHUB_OUTPUT

      - name: Build Release (no codesign)
        run: |
          set -euo pipefail
          xcodebuild \
            -scheme "${{ steps.scheme.outputs.scheme }}" \
            -configuration Release \
            -sdk macosx \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            clean build | xcpretty || exit ${PIPESTATUS[0]}

      - name: Package Release
        run: |
          mkdir -p release
          # Ưu tiên .app
          APP_PATH=$(find ~/Library/Developer/Xcode/DerivedData -type d -name "*.app" -print -quit)
          if [ -n "$APP_PATH" ]; then
            NAME=$(basename "$APP_PATH" .app)
            zip -qry "release/${NAME}.zip" "$APP_PATH"
          else
            # Nếu là binary CLI
            BIN=$(find ~/Library/Developer/Xcode/DerivedData -perm +111 -type f -maxdepth 6 -print | head -n1)
            if [ -n "$BIN" ]; then
              cp -f "$BIN" "release/$(basename "$BIN")"
            fi
          fi
          ls -lah release

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-build
          path: release
          if-no-files-found: error
