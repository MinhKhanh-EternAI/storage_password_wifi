import SwiftUI

enum ThemeMode: String, CaseIterable, Identifiable, Codable {
    case system
    case light
    case dark

    var id: String { rawValue }

    var name: String {
        switch self {
        case .system: return "H·ªá th·ªëng"
        case .light:  return "S√°ng"
        case .dark:   return "T·ªëi"
        }
    }

    var colorScheme: ColorScheme? {
        switch self {
        case .system: return nil
        case .light:  return .light
        case .dark:   return .dark
        }
    }
}

/// Icon hi·ªÉn th·ªã tr√™n thanh tr√™n c√πng: ‚òÄÔ∏è n·∫øu s√°ng, üåô n·∫øu t·ªëi (H·ªá th·ªëng th√¨ theo theme hi·ªán t·∫°i)
struct ThemeIcon: View {
    @AppStorage("themeMode") private var themeMode: ThemeMode = .system
    @Environment(\.colorScheme) private var scheme

    private var iconName: String {
        switch themeMode {
        case .light:  return "sun.max.fill"
        case .dark:   return "moon.fill"
        case .system: return scheme == .dark ? "moon.fill" : "sun.max.fill"
        }
    }

    var body: some View {
        Image(systemName: iconName)
            .imageScale(.large)
            .font(.system(size: 18, weight: .semibold))
            .accessibilityLabel(Text("Ch·ªß ƒë·ªÅ"))
    }
}

/// N√∫t ch·ªçn ch·ªß ƒë·ªÅ: menu ch·ªâ c√≥ ch·ªØ, **kh√¥ng icon** b√™n trong
struct ThemePickerButton: View {
    @AppStorage("themeMode") private var themeMode: ThemeMode = .system

    var body: some View {
        Menu {
            Picker("", selection: $themeMode) {
                ForEach(ThemeMode.allCases) { m in
                    Text(m.name).tag(m)
                }
            }
        } label: {
            ThemeIcon()
        }
    }
}
